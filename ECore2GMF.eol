// Change Fonts
findLabel('AttendeeLabelFigure').changeFont(true, false, 10);
findLabel("SeatLabelFigure").changeFont(false, false, 11);
findLabel("TableLabelFigure").changeFont(true, false, 15);
findLabel("LanguageLabelFigure").changeFont(false, true, 10);
findLabel("FoodAllergyLabelFigure").changeFont(true, true, 10);

// Centre labels
findFigure('TableFigure').centreLabel(true, true);
findFigure('SeatFigure').centreLabel(true, true);
findFigure('AttendeeFigure').centreLabel(false, true);
findFigure('LanguageFigure').centreLabel(true, true);
findFigure('FoodAllergyFigure').centreLabel(true, true);

// Move label
findFigure('AttendeeFigure').createInsets(0,0,0,0);

// Change palette headings
var palette = findPalette('seatingplanPalette');
palette.createNewToolGroup("AttendeeNodes", true);
palette.createNewToolGroup("ObjectNodes", true);
palette.createNewToolGroup("TableNodes", true);

palette.moveCreationToolTo("Attendee", "Objects", "AttendeeNodes");
palette.moveCreationToolTo("AttendeeWish", "Objects", "AttendeeNodes");
palette.moveCreationToolTo("FoodAllergy", "Objects", "ObjectNodes");
palette.moveCreationToolTo("Language", "Objects", "ObjectNodes");
palette.moveCreationToolTo("Table", "Objects", "TableNodes");
palette.moveCreationToolTo("Seat", "Objects", "TableNodes");
palette.tools.remove(findToolGroup("Objects"));

// Operations
operation findFigure(name: String){
	return GmfGraph!Figure.all.selectOne(s|s.name == name);
}

operation findLabel(name: String){
	return GmfGraph!Label.all.selectOne(s|s.name == name);
}

operation findPalette(name: String){
	return GmfTool!Palette.all.selectOne(s|s.title == name);
}

operation findToolGroup(name: String){
	return GmfTool!ToolGroup.all.selectOne(s|s.title == name);
}

operation GmfTool!Palette createNewToolGroup(name: String, collapsible: Boolean){
	var toolGroup = new GmfTool!ToolGroup;
	toolGroup.title = name;
	toolGroup.collapsible = collapsible;
	self.tools.add(toolGroup);
}

operation GmfTool!Palette moveCreationToolTo(name: String, from: String, to: String){
	var fromGroup = findToolGroup(from);
	var toGroup = findToolGroup(to);
	var creationTool = fromGroup.tools.selectOne(r|r.title == name);
	toGroup.tools.add(creationTool);
	fromGroup.tools.remove(creationTool);
}

operation GmfGraph!Figure centreLabel(vertically:Boolean, horizontally:Boolean) {
	self.layout = new GmfGraph!GridLayout;
	var label = self.children.first;
	label.layoutData = new GmfGraph!GridLayoutData;
	if(vertically) label.layoutData.grabExcessVerticalSpace = true;
	if(horizontally) label.layoutData.grabExcessHorizontalSpace = true;
}

operation GmfGraph!Label changeFont(makeBold:Boolean, makeItalics:Boolean, setSize:Integer) {
	self.font = new GmfGraph!BasicFont;
	if (makeBold) self.font.style = GmfGraph!FontStyle#BOLD;
	if (makeItalics) self.font.style = GmfGraph!FontStyle#ITALIC;
	if (setSize.isDefined()) self.font.height = setSize;
}

operation GmfGraph!Figure createInsets(top:Integer, bottom:Integer, left:Integer, right:Integer){
	self.insets = new GmfGraph!Insets;
	if (top.isDefined()) self.insets.Top = top;
	if (bottom.isDefined()) self.insets.Bottom = bottom;
	if (left.isDefined()) self.insets.Left = left;
	if (right.isDefined()) self.insets.Right = right;
}
