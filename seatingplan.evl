context SeatingPlan {

  constraint HasName {
      	check : self.seatingPlanName.isDefined()
      	message : 'Unnamed Seating Plan "' + self.eClass().name + '" not allowed'
      	fix {
          title : 'Add Seating Plan name to ' + self.eClass().name
          do {
              var name := System.user.prompt('Input name of seating plan');
              if (name.isDefined()) self.seatingPlanName := name;
          }

      }
  }
  
  
  critique NameStartsWithCapital  {
  		guard : self.satisfies('HasName')
  		check : self.seatingPlanName.firstToUpperCase() = self.seatingPlanName
  		message : 'SeatingPlan "' + self.seatingPlanName +
          '" should start with an upper-case letter'
  		fix {
          title : 'Rename to ' + self.seatingPlanName.firstToUpperCase()
          do {
              self.seatingPlanName := self.seatingPlanName.firstToUpperCase();
          }
      }
  		
  }
  
 constraint TableIdUnique {
 		guard: self.satisfies('NameStartsWithCapital')
		
		check: self.tables.tableID == self.tables.tableID.asSet()
		
		message: "All seated attendees must be unique, the same person cannot sit in two places"

}
 
  
  constraint SeatAttendeeUnique {
		guard: self.satisfies('TableIdUnique')
		
		check {
			var seatedAttendees = self.tables.collect(t | t.seats.attendeeSeat);
  			var duplicatePeople = seatedAttendees - seatedAttendees.asSet();
			return duplicatePeople.size() > 0;
		}
		
		message: "All seated attendees must be unique, the same person cannot sit in two places"
	}

}


context Attendee {

  constraint HasFirstAndLastName {
      	check : self.firstName.isDefined() and self.lastName.isDefined()
      	message : 'Attendee "' + self.eClass().name + '" must have a first name and a second name'
		fix {
          title : 'Ensure there is both a first and last name for ' + self.eClass().name
          do {
          
          		if (not self.firstName.isDefined()) {
          			var firstName := System.user.prompt('Input First Name');}
          		
          		if (not self.lastName.isDefined()) {
          			var lastName := System.user.prompt('Input Last Name');}

              	if (firstName.isDefined()) self.firstName := firstName;
              	if (lastName.isDefined()) self.lastName := lastName;

          }

      }
  }
  
  
  critique NamesStartWithCapitals  {
  
  		guard : self.satisfies('HasFirstAndLastName')
  		
  		check : self.firstName.firstToUpperCase() = self.firstName and
  				self.lastName.firstToUpperCase() = self.lastName
  		
  		message : "First Name: '" + self.firstName + "' and Last Name: '" + self.lastName + "' should start with an upper-cases"
  		
  		fix {

          title : 'Rename to ' + self.firstName.firstToUpperCase() + " " + self.lastName.firstToUpperCase()

          do {
              self.firstName := self.firstName.firstToUpperCase();
              self.lastName := self.lastName.firstToUpperCase();
          }
      }
  		
  }
  
  constraint HasLanguage {
  		guard : self.satisfies('HasFirstAndLastName')
  		
  		check: self.spokenLanguages.size() > 0
  		
  		message : self.firstName + " " + self.lastName + " must speak at least one language"
  		
  		fix {
  			title: "Add a spoken language for " + self.firstName + " " + self.lastName 
  			
  			do {
  				var chosenLanguages = System.user.chooseMany("Choose languages", SeatingPlan.languages);
				if (chosenLanguages.size() > 0) self.spokenLanguages.add(chosenLanguages);
  			}
  		}	
  		
  }
  
}



context Table {

	constraint TableHasID {
		check : self.tableID.isDefined()
      	message : 'Table "' + self.eClass().name + '" must have an ID'
		fix {
          title : 'Creating unique IDs for all the tables'
          do {
          		var i = 0; 
          		for (el in Table.all) {
          			el.tableID = i; i += 1;}
          }
      }
	}
	
	constraint HasCapacity {
		guard : self.satisfies('TableHasID')
		check : self.capacity.isDefined()
		message : 'Table "' + self.eClass().name + '" must have a capacity'
		fix {
          title : 'Set the capacity for the table'
          do {
          		var capacity = System.user.promptInteger("Input the table's capacity");
          		if (capacity.isDefined()) self.capacity = capacity;
          }

      }
	}
	
	
	constraint HasAtLeastOneAttendee {
	
		guard : self.satisfies('HasCapacity')
		check: self.seats.size() >= 1
		message: "Table " + self.tableID + " has not got any seats"
		
		fix {
		
			title: "Either add a seat or remove table " + self.tableID + " from the seating plan"

			do {
				var options = Sequence{"Remove table", "Add seat"};				
				var option = System.user.choose("Choose an option", options);
			
				if (option == "Remove table"){
					delete(self);
				}
				
				if (option == "Add seat"){
					var newSeat = new Seat;
					Seat.index = 1;
					var chosenAttendee = System.user.choose("Choose attendee", SeatingPlan.attendees);
					if (chosenAttendee.isDefined()) Seat.attendeeSeat = chosenAttendee;
					self.seats.add(newSeat);
				}
			
			}
		}
	
	}
	
	
//constraint AttendeeSatWithLanguage {
//	guard: self.satisfies('HasAtLeastOneAttendee')
//	
//	check {
//		return self.seats.forAll(s |
//			s.attendeeSeat.spokenLanguages.one(l | l in 
//			
//				self.seats.select(seat |
//					seat.index == s.index + 1 or
//					seat.index == s.index - 1
//				).attendeeSeat.spokenLanguages
//				
//			)
//		);
//	}
//}
	
//	critique AttendeeSatWithWishes {
//		check: ""
//	}
	
}

context Seat {

	constraint HasIndex {
		check: self.index.isDefined()
		message: "The Seat '" + self.eClass().name + "' must have an index"
		
		fix {
			title: "Creating index for the seat"
			do {
				self.index = self.parent.seats.index.max(0) + 1;
			}
		}
	}
	
	constraint HasAttendee {
		guard: self.satisfies('HasIndex')
		check: self.attendeeSeat.isDefined()
		message: "The Seat '" + self.eClass().name + "' must have an assigned attendee"
		fix {
			title: "Choose the attendee"
			do {
				var chosenAttendees = System.user.chooseMany("Choose attendees", SeatingPlan.attendees);
				if (chosenAttendees.size() > 0) self.attendees.add(chosenAttendees);
			}
		}
	}
}

context AttendeeWish {

	constraint HasReferencedAttendee {
		check: self.targetAttendee.isDefined()
		message: "There must be a referenced attendee"
		fix {
			title: "Choose the attendee"
			do {
				possibleAttendees = SeatingPlan.attendees - self.parent;
				var chosenAttendees = System.user.choose("Choose attendees", possibleAttendees);
				if (chosenAttendees.size() > 0) self.attendees.add(chosenAttendees);
			}
		}
	}
	
	constraint HasWish {
		guard: self.satisfies('HasReferencedAttendee')
		check: self.wish.isDefined()
		message: "There must be a wish defined"
		fix {
			title: "Choose the attendee"
			do {
				var feeling = System.user.choose("Choose feeling", Feeling);
				if (feeling.isDefined()) self.wish = feeling;
			}
		}
	}
	
	constraint AttendeeIsNotSelf {
		guard: self.satisfies('HasWish')
		check: self.targetAttendee <> self.parent
		message: "Cannot assign a feeling to the same person"
		fix {
			title: "Choose another attendee"
			do {
				possibleAttendees = SeatingPlan.attendees - self.parent;
				var chosenAttendees = System.user.choose("Choose attendees", possibleAttendees);
				if (chosenAttendees.size() > 0) self.attendees.add(chosenAttendees);
			}
		}
	}

}

context Language {

	constraint IsDefined {
		check: self.languageName.isDefined()
		message: "Language isn't defined"
		fix {
			title: "Set language name"
			do {
				name = System.user.prompt("Input language name");
				if (name.isDefined()) self.languageName = name;
			}
		}	
	}

}


context FoodAllergy {
	constraint IsDefined {
		check: self.foodAllergyName.isDefined()
		message: "Food Allergy isn't defined"
		fix {
			title: "Set allergy name"
			do {
				name = System.user.prompt("Input allergy name");
				if (name.isDefined()) self.foodAllergyName = name;
			}
		}
	}
}











