import "tools.eol";

pre {
	var tables = Table.all;
	var i = 0; 
  	for (el in tables) {
  		el.tableID = i; i += 1;
  		var j = 0;
  		for (seat in el.seats){seat.index = j; j += 1;}
  	}
  	var k = 0;
	for (a in Attendee.all){a.attendeeID = k; k+=1;}
  	var maths = Native("java.lang.Math");
}


context SeatingPlan {
  constraint HasName {
      	check : self.seatingPlanName.isDefined()
      	message : 'Seating plan must have a name'
      	fix {
          title : 'Add name to the seating plan'
          do {
              var name := System.user.prompt('Input name of seating plan');
              if (name.isDefined()) self.seatingPlanName = name;
          }

      }
  }
  
  
  critique NameStartsWithCapital  {
  		guard : self.satisfies('HasName')
  		check : self.seatingPlanName.firstToUpperCase() = self.seatingPlanName
  		message : 'SeatingPlan "' + self.seatingPlanName +
          '" should start with an upper-case letter'
  		fix {
          title : 'Rename to ' + self.seatingPlanName.firstToUpperCase()
          do {
              self.seatingPlanName := self.seatingPlanName.firstToUpperCase();
          }
      }
  		
  }
	
	
	constraint AllergyUnique {
		check: self.allergies.name.size() == self.allergies.name.asSet().size()
		message: "Should not have duplicate names for food allergies"
		fix {
			title: "Delete the duplicates"
			do {
				var allergyNamesSet = self.allergies.name.asSet();
				var allergies = allergyNamesSet.collect(al | new FoodAllergy(name=al));
				for (att in Attendee.all){
					att.foodAllergies = allergies.select(al|att.foodAllergies.name.includes(al.name));
				}
				self.allergies = allergies;
			}
		}
	}
	
	
	constraint LanguageUnique {
		check: self.languages.name.size() == self.languages.name.asSet().size()
		message: "Should not have duplicate names for languages"
		fix {
			title: "Delete the duplicates"
			do {
				var namesSet = self.languages.name.asSet();
				var languages = namesSet.collect(lang | new Language(name=lang));
				for (att in Attendee.all){
					att.spokenLanguages = languages.select(la|att.spokenLanguages.name.includes(la.name));
				}
				self.languages = languages;
			}
		}
	}

}


context Attendee {

  constraint HasFirstAndLastName {
      	check : self.firstName.isDefined() and self.lastName.isDefined()
      	message : 'Attendee "' + self.eClass().name + '" must have a first name and a second name'
		fix {
          title : 'Ensure there is both a first and last name for ' + self.eClass().name
          do {
          		if (not self.firstName.isDefined()) {
          			var firstName = System.user.prompt('Input First Name');
          			if (firstName.isDefined()) self.firstName := firstName;
          		}
          		
          		if (not self.lastName.isDefined()) {
          			var lastName = System.user.prompt('Input Last Name');
          			if (lastName.isDefined()) self.lastName := lastName;
          		}
          }

      }
  }
    
  critique NamesStartWithCapitals  {
  
  		guard : self.satisfies('HasFirstAndLastName')
  		check : self.firstName.firstToUpperCase() = self.firstName and
  				self.lastName.firstToUpperCase() = self.lastName
  		
  		message : "First Name: '" + self.firstName + 
  					"' and Last Name: '" + self.lastName + 
  					"' both should start with an upper-case"
  		fix {
          title : 'Rename to ' + self.firstName.firstToUpperCase() + " " + self.lastName.firstToUpperCase()
          do {
              self.firstName := self.firstName.firstToUpperCase();
              self.lastName := self.lastName.firstToUpperCase();
          }
      }
  		
  }
  
  constraint HasLanguage {
  		guard : self.satisfies('HasFirstAndLastName')
  		check: self.spokenLanguages.size() > 0
  		message : self.firstName + " " + self.lastName + " must speak at least one language"
  		fix {
  			title: "Add a spoken language for " + self.firstName + " " + self.lastName 
  			do {
  				if (Language.All.size() > 0){
  					var chosenLanguages = System.user.chooseMany("Choose languages", Language.All);
  					chosenLanguages.forAll(cl | self.spokenLanguages.add(cl));
  				} else {
  					System.user.inform("There are no languages instatiated. Please add a language to the Model first.");
  				}
  			}
  		}	
  }
  
  constraint SeatIsDefined {
  		guard: self.satisfies('HasLanguage')
  		check: self.mySeat.isDefined()
  		message: self.firstName + " " + self.lastName + " must have a allocated seat."
  		fix {
  			title: "Choose a seat for the attendee"
  			do {
  				var chosenTable = System.user.choose("Choose which table", Table.All);
  				
  				if (chosenTable.isDefined()){
  					var availableSeats = chosenTable.seats.select(s | not s.attendeeSeat.isDefined());
  					if (availableSeats.size() > 0){
  						var chosenSeat = System.user.choose("Choose which seat", availableSeats);
  						if (chosenSeat.isDefined()) self.mySeat = chosenSeat;	
  					}
  					else System.user.inform("There are no available seats at this table. Add a seat to assign this attendee.");
  				} else System.user.inform("There are no available tables");
  			}
  		}
  }
  
  constraint AttendeeSatWithLanguage {
		guard: self.satisfies('SeatIsDefined')
		check: self.isSittingNextToCommonLanguage()
		message: self.firstName + " " + self.lastName + " on Table " + self.mySeat.myTable.tableID + " isn't sitting next to someone that can speak their language"
		fix {
			title: "Find available seat with neighbours speaking the same language."
			do {
				var availableSeats = Seat.all.select(s | not s.attendeeSeat.isDefined());
				var seats = availableSeats.select( s | s.GetNeighbours().spokenLanguages.flatten().exists(l| self.spokenLanguages.includes(l)));
				if (seats.size()>0){
					var chosenSeat = System.user.choose("Choose a seat where a neighbour will speak the same language:", seats);
					if (chosenSeat.isDefined()) self.mySeat = chosenSeat;
				} else {System.user.inform("There are no available seats with a person speaking a common language.");}
			}
		}
	}
	
	
	constraint DifferentWishesOnSamePerson {
		check {
			for (attWish in self.anttendeeWishes){
				var dup = self.anttendeeWishes.select(aW | aW.targetAttendee == attWish.targetAttendee).wish.literal;
				if (dup.size() > 1){
					if (dup.includes("Like") and dup.includes("Dislike")){
						return false;
					}
				}
			} return true;
		}
		message: self.firstName + " " + self.lastName + " has conflicting wishes for the same person"
		fix {
			title: "Remove conflicting wishes"
			do {
				var newAttendeeList: Sequence;
				var aWishNumbers = self.anttendeeWishes.aggregate(aW | aW.targetAttendee, self.anttendeeWishes.select(aW2 | aW2.targetAttendee == aW.targetAttendee));
				
				for (attendee in aWishNumbers.keySet()){
				
					if (aWishNumbers.get(attendee) > 1){
						var choice = System.user.choose("Choose Like or Dislike for " + attendee.firstName + " " + attendee.lastName, Sequence{"Like", "Dislike"});
						self.anttendeeWishes = self.anttendeeWishes.reject(aW | aw.targetAttendee == attendee);
						self.anttendeeWishes.add(new AttendeeWish(sourceAttendee=self, targetAttendee = attendee, wish=choice));
					}
				}
				self.anttendeeWishes = newAttendeeList;
			}
		}
	}
}



context Table {
	
	constraint HasCapacity {
		check : self.capacity.isDefined() and self.capacity >= 1
		message : 'Table "' + self.eClass().name + '" must have a capacity'
		fix {
          title : 'Set the capacity for the table'
          do {
          		var capacity = System.user.promptInteger("Input the table's capacity");
          		if (capacity.isDefined()) self.capacity = capacity;
          }
      }
	}
	
	
	constraint HasAtLeastOneAttendee {
	
		guard : self.satisfies('HasCapacity')
		check: self.seats.size() >= 1
		message: "Table " + self.tableID + " has not got any seats"
		
		fix {
		
			title: "Either add a seat or remove table " + self.tableID + " from the seating plan"

			do {
				var options = Sequence{"Remove table", "Add seat"};				
				var option = System.user.choose("Choose an option", options);
			
				if (option == "Remove table"){
					delete(self);
				}
				
				if (option == "Add seat"){
					if (Attendee.all.size() > 0){
						var chosenAttendee = System.user.choose("Choose attendee", Attendee.all);
						if (chosenAttendee.isDefined()) {
							self.seats.add(new Seat(index=1, attendeeSeat=chosenAttendee));
						} else {
							System.user.inform("You must choose an attendee");}
					} else {
						System.user.inform("There are no attendees created. Please add an attendee first");}
				}
			
			}
		}
	
	}
	
	constraint LessThanCapacity {
		guard : self.satisfies('HasCapacity')
		check: self.seats.size() <= self.capacity
		message: "Table " + self.tableID + " has got more seats than capacity"
		fix {
			title: "Delete seats"
			do {
				var chosenSeats = System.user.chooseMany("Choose seats to delete", self.seats);
				for (seat in chosenSeats){delete(seat);}
			}
		}
	}	
}


context AttendeeWish {

	constraint HasReferencedAttendee {
		check: self.targetAttendee.isDefined() and self.sourceAttendee.satisfies('SeatIsDefined')
		message: "There must be a referenced attendee"
		fix {
			title: "Choose the attendee"
			do {
				self.targetAttendee = self.GetAttendeeFromListBarSelf();
			}
		}
	}
	
	constraint HasWish {
		guard: self.satisfies('HasReferencedAttendee')
		check: self.wish.isDefined()
		message: "There must be a wish defined"
		fix {
			title: "Choose the attendee"
			do {
				var feeling = System.user.choose("Choose feeling", Feeling);
				if (feeling.isDefined()) self.wish = feeling;
			}
		}
	}
	
	constraint AttendeeIsNotSelf {
		guard: self.satisfies('HasWish')
		check: self.targetAttendee <> self.sourceAttendee
		message: "Cannot assign a feeling to the same person"
		fix {
			title: "Choose another attendee"
			do {
				self.targetAttendee = self.GetAttendeeFromListBarSelf();
			}
		}
	}
	
	critique AttendeeSatWithDislike {
		guard: self.satisfies('AttendeeIsNotSelf')
		check: not(self.sourceAttendee.IsOnSameTableAs(self.targetAttendee) and self.wish.literal == "Dislike")
		message: self.sourceAttendee.firstName + " " + self.sourceAttendee.lastName 
				+ " is sitting on a table with " + self.targetAttendee.firstName + " " 
				+ self.targetAttendee.lastName + ", which they have requested not to"
		fix {
			title: "Choose an available seat on another table"
			do {
				var availableTables = Table.all.select(t | not t == self.sourceAttendee.mySeat.myTable and t.seats.reject(s|s.attendeeSeat.isDefined()).size() > 0);
				if (availableTables.size() > 0) {
					var chosenTable = System.user.choose("Choose table", availableTables);
					if (chosenTable.isDefined()){
						 var chosenSeat = System.user.choose("Choose seat", chosenTable.seats.reject(s|s.attendeeSeat.isDefined()));
						 if (chosenSeat.isDefined()){self.sourceAttendee.mySeat = chosenSeat;}
						 else {System.user.inform("You must choose an empty seat");}
					}
				}
				else {System.user.inform("There are no other tables with available seats. Create a seat on another table to continue.");}
			}
		
		}
	}
	
	critique AttendeeNotSatWithLike {
		guard: self.satisfies('AttendeeIsNotSelf')
		check: not(not self.sourceAttendee.IsOnSameTableAs(self.targetAttendee) and self.wish.literal == "Like")
		message: self.sourceAttendee.firstName + " " + self.sourceAttendee.lastName 
				+ " isn't sitting on a table with " + self.targetAttendee.firstName + " " 
				+ self.targetAttendee.lastName + ", which they have requested"
		fix {
			title: "Check if there is an available seat at their table, if so assign them there"
			do {
				var availableSeats = self.targetAttendee.mySeat.myTable.seats.select(s|not s.attendeeSeat.isDefined());
				if (availableSeats.size() > 0){
					var seat = System.user.choose("Choose seat", availableSeats);
					if (seat.isDefined()){self.sourceAttendee.mySeat = seat;}
				} else {
					System.user.inform("There are no free seats at the table with "+ self.targetAttendee.firstName + " " 
										+ self.targetAttendee.lastName);
				}
			}
		}
	}
}

context Language {

	constraint IsDefined {
		check: self.name.isDefined()
		message: "Language isn't defined"
		fix {
			title: "Set language name"
			do {
				var name = System.user.prompt("Input language name");
				if (name.isDefined()) self.name = name;
			}
		}	
	}
	
	critique NameStartsWithCapital  {
  		guard : self.satisfies('IsDefined')
  		check : self.name.firstToUpperCase() = self.name
  		message : 'Language Name "' + self.name +
          '" should start with an upper-case letter'
  		fix {
          title : 'Rename to ' + self.name.firstToUpperCase()
          do {
              self.name := self.name.firstToUpperCase();
          }
      }
  }

}


context FoodAllergy {
	constraint IsDefined {
		check: self.name.isDefined()
		message: "Food Allergy isn't defined"
		fix {
			title: "Set allergy name"
			do {
				var name = System.user.prompt("Input allergy name");
				if (name.isDefined()) self.name = name;
			}
		}
	}
	
	critique NameStartsWithCapital  {
  		guard : self.satisfies('IsDefined')
  		check : self.name.firstToUpperCase() = self.name
  		message : 'Allergy Name "' + self.name +
          '" should start with an upper-case letter'
  		fix {
          title : 'Rename to ' + self.name.firstToUpperCase()
          do {
              self.name := self.name.firstToUpperCase();
          }
      }
  }
}
